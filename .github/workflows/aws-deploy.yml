name: AWS Deploy

on:
  workflow_call:
    inputs:
      prefix:
        required: true
        description: "Disambiguate deployments to the sit account"
        type: string
      oidcEnv:
        required: true
        description: "Specifies which GitHub environment is used for OIDC trust"
        type: string
      env:
        required: true
        description: "Specifies which environment to deploy to. Some of these share AWS accounts, e.g. pr and sit."
        type: string
      version:
        required: true
        description: "The version of the build artifact to deploy"
        type: string

concurrency: "${{ inputs.prefix }}${{ inputs.env }}"

jobs:
  StackDeploy:
    name: "Deploy ${{ inputs.env }}"
    environment: ${{ inputs.oidcEnv }}
    permissions:
      contents: read
      id-token: write
      issues: write
      pull-requests: write
      checks: write
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.number }}
    defaults:
      run:
        working-directory: "cdk/landing-zone"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - name: Download Lambda build artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-build-artifacts
          path: cdk/lambda/dist

      - name: Artifactory login
        id: arti-auth
        uses: msmg-private/platform-artifactory-oidc-action@v14

      - name: Set node auth token
        run: echo "NODE_AUTH_TOKEN=$JFROG_ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "pnpm"
          cache-dependency-path: "cdk/landing-zone/pnpm-lock.yaml"
          always-auth: true
          registry-url: https://${{ steps.arti-auth.outputs.audience }}/artifactory/api/npm/main-npm/

      - run: pnpm install --frozen-lockfile
      - run: pnpm build:bundle

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT